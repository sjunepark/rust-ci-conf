# This workflow runs whenever a PR is opened or updated, or a commit is pushed to main.
# It runs several checks:
# - fmt: checks that the code is formatted according to rustfmt
# - clippy: checks that the code does not contain any clippy warnings
# - semver: checks that the code is semver compatible
# - doc: checks that the code can be documented without errors
# - hack: check combinations of feature flags
# - msrv: check that the msrv(minimal supported rust version) specified in the crate is correct

name: check

env:
  RUST_LOG: ${{ vars.RUST_LOG }}

permissions:
  contents: read

# This configuration allows maintainers of this repo to create a branch and pull request based on the new branch.
# Restricting the push trigger to the main branch ensures that the PR only gets built once.
# It's recommended to push to a feature branch or a dev branch, and then create a PR from that branch to main.
on:
  push:
    branches: [ main ]
  pull_request:

# If new code is pushed to a PR branch, then cancel in progress workflows for that PR.
# Ensures that we don't waste CI time and returns results quicker
# ref: https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  fmt:
    name: stable / fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - run: cargo fmt --all --check
  clippy:
    name: ${{ matrix.toolchain }} / clippy
    strategy:
      fail-fast: false
      matrix:
        # Get early warning of new lints which are regularly introduced in beta channels.
        toolchain: [ stable, beta ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy
      - name: cargo clippy
        uses: giraffate/clippy-action@v1
        with:
          reporter: 'github-pr-check'
          github_token: ${{ secrets.GITHUB_TOKEN }}
  doc:
    # run doc generation on nightly rather than stable. This enables features like
    # <https://doc.rust-lang.org/beta/unstable-book/language-features/doc-cfg.html>
    # that allow an API to be documented as only available in some specific platforms.
    runs-on: ubuntu-latest
    name: nightly / doc
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install nightly
        uses: dtolnay/rust-toolchain@nightly
      - name: Install cargo-docs-rs
        uses: dtolnay/install@cargo-docs-rs
      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v2
      - name: Build docs for all crates
        run: |
          crates=$(cargo metadata --no-deps --format-version=1 | jq -r '.workspace_members[]')
          for crate in $crates; do
            echo "Building docs for $crate"
            cargo docs-rs -p $crate
          done
  hack:
    # cargo-hack checks combinations of feature flags to ensure that features are all additive,
    # which is required for feature unification
    runs-on: ubuntu-latest
    name: ubuntu / stable / features
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      # intentionally no target specifier; see https://github.com/jonhoo/rust-ci-conf/pull/4
      # --feature-powerset runs for every combination of features
      - name: cargo hack
        run: cargo hack --workspace --feature-powerset check
  msrv:
    name: ubuntu / ${{ matrix.msrv }}
    runs-on: ubuntu-latest
    # we use a matrix here just because env can't be used in job names
    # https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
    strategy:
      matrix:
        msrv: [ "1.56.1" ] # 2021 edition requires 1.56
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install ${{ matrix.msrv }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.msrv }}
      - name: cargo +${{ matrix.msrv }} check
        run: cargo check --workspace --all-features --all-targets
  # There are edge cases where --all-targets allows uncatched errors to be introduced.
  # For example, when a dev dependency enables a certain feature flag which the normal dependencies should have,
  # --all-targets will not through a compile error, but --lib --bins will.
  # This can be caught by `cargo hack`, but am not sure how `hack` internally works.
  lib-bins:
    name: ubuntu / stable / lib-bins
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo check
        run: cargo check --workspace --all-features --lib --bins